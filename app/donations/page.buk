'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import DonationAmountSelector from './DonationAmountSelector';
import PaymentMethodSelector from './PaymentMethodSelector';

interface DonationPageProps {}

const DonationPage: React.FC<DonationPageProps> = () => {
  const [amount, setAmount] = useState<string>('');
  const [paymentMethod, setPaymentMethod] = useState<string>('');
  const router = useRouter();
  
  const isValidAmount = Boolean(
    amount && 
    !isNaN(Number(amount)) && 
    Number(amount) > 0 &&
    Number(amount) <= 1000000
  );

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    
    try {
      if (!isValidAmount) {
        throw new Error('Monto inválido');
      }

      if (paymentMethod === 'bank-transfer') {
        localStorage.setItem('donationFlow', JSON.stringify({
          amount,
          timestamp: new Date().toISOString(),
        }));
        await router.push(`/donations/bank-transfer?amount=${encodeURIComponent(amount)}`);
      } else if (paymentMethod === 'mercadopago') {
        await router.push(`/donations/mercado-pago?amount=${encodeURIComponent(amount)}`);
      } else if (paymentMethod === 'webpay') {
        await router.push(`/donations/webpay?amount=${encodeURIComponent(amount)}`);
      } else if (paymentMethod === 'paypal') {
        await router.push(`/donations/paypal?amount=${encodeURIComponent(amount)}`);
      } else {
        throw new Error('Método de pago inválido');
      }
    } catch (error) {
      console.error('Error processing donation:', error);
      alert(error instanceof Error ? error.message : 'Error procesando la donación');
    }
  }; 

  return (
    <main className="max-w-2xl mx-auto p-6">
      <h1 className="text-3xl font-bold mb-8 text-center">Realizar una donación</h1>
      
      <form onSubmit={handleSubmit} className="space-y-8">
        <DonationAmountSelector 
          amount={amount} 
          onAmountChange={setAmount}
        />
        
        <div className="mt-8">
          <PaymentMethodSelector 
            selectedMethod={paymentMethod}
            onMethodChange={setPaymentMethod}
          />
        </div>

        <button
          type="submit"
          className="w-full py-3 px-4 text-white bg-blue-600 hover:bg-blue-700 rounded-lg font-medium disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          disabled={!isValidAmount || !paymentMethod}
        >
          Continuar
        </button>
      </form>
    </main>
  );
};

export default DonationPage;